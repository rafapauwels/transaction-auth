[1mdiff --git a/project.clj b/project.clj[m
[1mindex 2d225ec..3664a5e 100644[m
[1m--- a/project.clj[m
[1m+++ b/project.clj[m
[36m@@ -3,11 +3,14 @@[m
   :url ""[m
   :license {:name "GNU GPL 3.0"[m
             :url "https://www.gnu.org/licenses/gpl-3.0.en.html"}[m
[31m-  :dependencies [[org.clojure/clojure "1.10.0"][m
[31m-                 [org.clojure/data.json "0.2.6"][m
[32m+[m[32m  :plugins [[lein-midje "3.2.1"]][m
[32m+[m[32m  :dependencies [[org.clojure/data.json "0.2.6"][m
[32m+[m[32m                 [org.clojure/clojure "1.10.0"][m
                  [ring/ring-defaults "0.3.2"][m
                  [http-kit "2.3.0"][m
                  [compojure "1.6.1"]][m
   :target-path "target/%s"[m
[31m-  :profiles {:uberjar {:aot :all}}[m
[32m+[m[32m  :profiles {:dev {:dependencies [[midje "1.9.1"][m
[32m+[m[32m                                  [nubank/selvage "0.0.1"]]}[m
[32m+[m[32m             :uberjar {:aot :all}}[m
   :main ^{:skip-aot true} transaction-authorization.server)[m
[1mdiff --git a/src/transaction_authorization/adapter.clj b/src/transaction_authorization/adapter.clj[m
[1mindex 9ca1cce..63e9184 100644[m
[1m--- a/src/transaction_authorization/adapter.clj[m
[1m+++ b/src/transaction_authorization/adapter.clj[m
[36m@@ -2,7 +2,11 @@[m
   (:require [clojure.data.json :as json]))[m
 [m
 (defn json->map [json-data][m
[31m-  (json/read-str json-data :key-fn keyword))[m
[32m+[m[32m  (try[m
[32m+[m[32m    (json/read-str json-data :key-fn keyword)[m
[32m+[m[32m    (catch java.io.EOFException e nil)))[m
 [m
 (defn map->json [map-data][m
[31m-  (json/write-str map-data))[m
[32m+[m[32m  (try[m
[32m+[m[32m    (json/write-str map-data)[m
[32m+[m[32m    (catch java.io.EOFException e nil)))[m
[1mdiff --git a/src/transaction_authorization/controller.clj b/src/transaction_authorization/controller.clj[m
[1mindex a957a86..54727ca 100644[m
[1m--- a/src/transaction_authorization/controller.clj[m
[1m+++ b/src/transaction_authorization/controller.clj[m
[36m@@ -5,6 +5,9 @@[m
    [transaction-authorization.logic     :as logic][m
    [transaction-authorization.port      :as port]))[m
 [m
[32m+[m[32m(defn empty-body? [body][m
[32m+[m[32m  (or (empty? body) (nil? body)))[m
[32m+[m
 (defn request-transaction-auth! [valid-transaction][m
   (let [account-state       (port/account-state "internal-notation")[m
         latest-transactions (take 10 (port/transaction-history))[m
[36m@@ -23,20 +26,26 @@[m
     (adapter/map->json (conj account-state current-violation))))[m
 [m
 (defn new-account [account][m
[31m-  (let [mapped-account (adapter/json->map account)[m
[31m-        valid-account  (validator/account mapped-account)][m
[31m-    (if (boolean valid-account)[m
[31m-      (do (let [account (logic/new-account (:activeCard valid-account)[m
[31m-                                           (:availableLimit valid-account))][m
[31m-            (port/save-account! account)))[m
[31m-      (port/add-violations! :illegal-account-reset))[m
[31m-    (return-account)))[m
[32m+[m[32m  (when (not (empty-body? account))[m
[32m+[m[32m    (let [mapped-account (adapter/json->map account)[m
[32m+[m[32m          valid-account  (validator/account mapped-account)][m
[32m+[m[32m      (if (boolean mapped-account)[m
[32m+[m[32m        (do (if (boolean valid-account)[m
[32m+[m[32m              (do (let [account (logic/new-account (:activeCard valid-account)[m
[32m+[m[32m                                                   (:availableLimit valid-account))][m
[32m+[m[32m                    (port/save-account! account)))[m
[32m+[m[32m              (port/add-violations! [:illegal-account-reset]))[m
[32m+[m[32m            (return-account))[m
[32m+[m[32m        nil))))[m
 [m
 (defn new-transaction [transaction][m
[31m-  (let [mapped-transaction (adapter/json->map transaction)[m
[31m-        valid-transaction  (validator/transaction mapped-transaction)][m
[31m-    (when (boolean valid-transaction)[m
[31m-      (dosync[m
[31m-       (port/save-transaction! valid-transaction) [m
[31m-       (request-transaction-auth! valid-transaction)[m
[31m-       (return-account)))))[m
[32m+[m[32m  (when (not (empty-body? transaction))[m
[32m+[m[32m    (let [mapped-transaction (adapter/json->map transaction)[m
[32m+[m[32m          valid-transaction  (validator/transaction mapped-transaction)][m
[32m+[m[32m      (if (boolean mapped-transaction)[m
[32m+[m[32m        (when (boolean valid-transaction)[m
[32m+[m[32m          (dosync[m
[32m+[m[32m           (port/save-transaction! valid-transaction)[m[41m [m
[32m+[m[32m           (request-transaction-auth! valid-transaction)[m
[32m+[m[32m           (return-account)))[m
[32m+[m[32m        nil))))[m
[1mdiff --git a/src/transaction_authorization/db.clj b/src/transaction_authorization/db.clj[m
[1mindex 378d49d..eacf2c2 100644[m
[1m--- a/src/transaction_authorization/db.clj[m
[1m+++ b/src/transaction_authorization/db.clj[m
[36m@@ -18,7 +18,8 @@[m
 [m
 (defn delete! [target][m
   (cond[m
[31m-    (= target :current-violation) (dosync (ref-set db-current-violation []))))[m
[32m+[m[32m    (= target :current-violation) (dosync (ref-set db-current-violation []))[m
[32m+[m[32m    (= target :mock-account       (dosync (ref-set db-account nil)))))[m
 [m
 (defn get! [target][m
   (cond[m
[1mdiff --git a/src/transaction_authorization/logic.clj b/src/transaction_authorization/logic.clj[m
[1mindex ddbe72b..4f7c768 100644[m
[1m--- a/src/transaction_authorization/logic.clj[m
[1m+++ b/src/transaction_authorization/logic.clj[m
[36m@@ -1,9 +1,16 @@[m
[31m-(ns transaction-authorization.logic)[m
[32m+[m[32m(ns transaction-authorization.logic[m
[32m+[m[32m  (:require [transaction-authorization.util :as util]))[m
 [m
 (defn new-account [active-card available-limit][m
   {:active-card     active-card[m
    :available-limit available-limit})[m
 [m
[32m+[m[32m(defn less-than-2-minutes? [timediff][m
[32m+[m[32m  (and (= 0 (:years timediff))[m
[32m+[m[32m       (= 0 (:days timediff))[m
[32m+[m[32m       (= 0 (:hours timediff))[m
[32m+[m[32m       (> 2 (:minutes timediff))))[m
[32m+[m
 (defn similar-transaction? [current last][m
   (and (= (:merchant current) (:merchant last))[m
        (= (:amount current)   (:amount last))))[m
[36m@@ -20,9 +27,10 @@[m
         last-transaction    (first ts)][m
     (if (similar-transaction? current-transaction last-transaction)[m
       (let [current-time (:time current-transaction)[m
[31m-            last-time    (:time last-transaction)][m
[31m-        ()))[m
[31m-    false))[m
[32m+[m[32m            last-time    (:time last-transaction)[m
[32m+[m[32m            timediff     (util/datetime-diff last-time current-time)][m
[32m+[m[32m        (if (less-than-2-minutes? timediff) true false))[m
[32m+[m[32m      false)))[m
 [m
 (defn card-blocked? [m
   "No transaction should be allowed if the card is blocked"[m
[36m@@ -32,9 +40,12 @@[m
 (defn high-frequency? [m
   "There should be no more than 3 transactions on a 2 minute interval"[m
   [t ts][m
[31m-  ;(println "latest transaction: ") (println t)[m
[31m-  ;(println "list of transactions: ") (println ts)[m
[31m-  false)[m
[32m+[m[32m  (if (or (nil? ts) (= 1 (count ts)))[m
[32m+[m[32m    false[m
[32m+[m[32m    (let [current  (:time t)[m
[32m+[m[32m          third    (:time (second ts))[m
[32m+[m[32m          timediff (util/datetime-diff third current)][m
[32m+[m[32m      (if (less-than-2-minutes? timediff) true false))))[m
 [m
 (defn get-violations [t ts account-info][m
   {:card-blocked                  (card-blocked? account-info)[m
[1mdiff --git a/src/transaction_authorization/port.clj b/src/transaction_authorization/port.clj[m
[1mindex 369aa27..8b92d1a 100644[m
[1m--- a/src/transaction_authorization/port.clj[m
[1m+++ b/src/transaction_authorization/port.clj[m
[36m@@ -27,9 +27,10 @@[m
   ([] [m
    (account-state "camel"))[m
   ([notation][m
[31m-   (let [account    (db/get! :account)][m
[31m-     (if (= notation "camel")[m
[31m-       {:account {:activeCard     (:active-card account)[m
[31m-                  :availableLimit (:available-limit account)}}[m
[31m-       {:account {:active-card     (:active-card account)[m
[31m-                  :available-limit (:available-limit account)}}))))[m
[32m+[m[32m   (let [account (db/get! :account)][m
[32m+[m[32m     (when (not (nil? account))[m
[32m+[m[32m       (if (= notation "camel")[m
[32m+[m[32m         {:account {:activeCard     (:active-card account)[m
[32m+[m[32m                    :availableLimit (:available-limit account)}}[m
[32m+[m[32m         {:account {:active-card     (:active-card account)[m
[32m+[m[32m                    :available-limit (:available-limit account)}})))))[m
[1mdiff --git a/src/transaction_authorization/server.clj b/src/transaction_authorization/server.clj[m
[1mindex 1eaf717..4320cb1 100644[m
[1m--- a/src/transaction_authorization/server.clj[m
[1m+++ b/src/transaction_authorization/server.clj[m
[36m@@ -6,16 +6,18 @@[m
             [clojure.edn :as edn]))[m
 [m
 (defn new-account-endpoint [request][m
[31m-  (let [body (slurp (:body request))][m
[31m-    {:status 200[m
[32m+[m[32m  (let [req-body (slurp (:body request))[m
[32m+[m[32m        body (controller/new-account req-body)][m
[32m+[m[32m    {:status (if (nil? body) 400 200)[m
      :headers {"Content-Type" "text/html"}[m
[31m-     :body (controller/new-account body)}))[m
[32m+[m[32m     :body body}))[m
 [m
 (defn new-transaction-endpoint [request][m
[31m-  (let [body (slurp (:body request))][m
[31m-    {:status 200[m
[32m+[m[32m  (let [req-body (slurp (:body request))[m
[32m+[m[32m        body (controller/new-transaction req-body)][m
[32m+[m[32m    {:status (if (nil? body) 400 200)[m
      :headers {"Content-Type" "text/html"}[m
[31m-     :body (controller/new-transaction body)}))[m
[32m+[m[32m     :body body}))[m
 [m
 (defroutes entry-routes[m
   (POST "/accounts" [] new-account-endpoint)[m
[1mdiff --git a/src/transaction_authorization/util.clj b/src/transaction_authorization/util.clj[m
[1mindex ba7c2d8..705fbdb 100644[m
[1m--- a/src/transaction_authorization/util.clj[m
[1m+++ b/src/transaction_authorization/util.clj[m
[36m@@ -7,3 +7,13 @@[m
   (try [m
     (boolean (ZonedDateTime/parse d))[m
     (catch DateTimeException e false)))[m
[32m+[m
[32m+[m[32m(defn datetime-diff [dd d][m
[32m+[m[32m  (let [date (ZonedDateTime/parse d)[m
[32m+[m[32m        second-date (ZonedDateTime/parse dd)][m
[32m+[m[32m    {:years   (- (.getYear date) (.getYear second-date))[m
[32m+[m[32m     :days    (- (.getDayOfYear date) (.getDayOfYear second-date))[m
[32m+[m[32m     :hours   (- (.getHour date) (.getHour second-date))[m
[32m+[m[32m     :minutes (- (.getMinute date) (.getMinute second-date))[m
[32m+[m[32m     :seconds (- (.getSecond date) (.getSecond second-date))[m
[32m+[m[32m     :nano    (- (.getNano date) (.getNano second-date))}))[m
[1mdiff --git a/test/transaction_authorization/core_test.clj b/test/transaction_authorization/core_test.clj[m
[1mdeleted file mode 100644[m
[1mindex dfd2b65..0000000[m
[1m--- a/test/transaction_authorization/core_test.clj[m
[1m+++ /dev/null[m
[36m@@ -1,7 +0,0 @@[m
[31m-(ns transaction-authorization.core-test[m
[31m-  (:require [clojure.test :refer :all][m
[31m-            [transaction-authorization.core :refer :all]))[m
[31m-[m
[31m-(deftest a-test[m
[31m-  (testing "FIXME, I fail."[m
[31m-    (is (= 0 1))))[m
